{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["List","id","name","votes","App","state","beer","handleEvent","beerId","updateList","_this","map","Object","assign","setState","this","_this2","react_default","a","createElement","App_BestBeers","key","onVote","Component","BestBeers","handleClick","_this3","props","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAO,CACX,CACEC,GAAI,EACJC,KAAM,SACNC,MAAO,GAET,CACEF,GAAI,EACJC,KAAM,QACNC,MAAO,GAET,CACEF,GAAI,EACJC,KAAM,cACNC,MAAO,GAET,CACEF,GAAI,EACJC,KAAM,YACNC,MAAO,GAET,CACEF,GAAI,EACJC,KAAM,MACNC,MAAO,GAET,CACEF,GAAI,EACJC,KAAM,OACNC,MAAO,KAILC,6MACJC,MAAQ,CACNC,KAAM,MAORC,YAAc,SAAAC,GACZ,IAAMC,EAAaC,EAAKL,MAAMC,KAAKK,IAAI,SAAAL,GACrC,OAAIA,EAAKL,KAAOO,EACPI,OAAOC,OAAO,GAAIP,EAAM,CAC7BH,MAAOG,EAAKH,MAAQ,IAGfG,IAIXI,EAAKI,SAAS,CACZR,KAAMG,wFAfRM,KAAKD,SAAS,CAAER,KAAMN,qCAmBf,IAAAgB,EAAAD,KACP,OAAOA,KAAKV,MAAMC,KAAKK,IAAI,SAAAL,GAAI,OAC7BW,EAAAC,EAAAC,cAACC,EAAD,CACElB,KAAMI,EAAKJ,KACXmB,IAAKf,EAAKL,GACVA,GAAIK,EAAKL,GACTE,MAAOG,EAAKH,MACZmB,OAAQN,EAAKT,uBAhCHgB,aAsCZC,6MACJC,YAAc,kBAAMC,EAAKC,MAAML,OAAOI,EAAKC,MAAM1B,6EAG/C,OACEgB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,SACGJ,KAAKY,MAAMzB,KACZe,EAAAC,EAAAC,cAAA,UAAQU,QAASd,KAAKU,aAAtB,KACCV,KAAKY,MAAMxB,eATEoB,aAgBTnB,IC9EK0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.632a7e7d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst List = [\n  {\n    id: 1,\n    name: 'witbir',\n    votes: 0\n  },\n  {\n    id: 2,\n    name: 'stout',\n    votes: 0\n  },\n  {\n    id: 3,\n    name: 'hefe-waizen',\n    votes: 0\n  },\n  {\n    id: 4,\n    name: 'bestbiter',\n    votes: 0\n  },\n  {\n    id: 5,\n    name: 'IPA',\n    votes: 0\n  },\n  {\n    id: 6,\n    name: 'pils',\n    votes: 0\n  }\n]\n\nclass App extends Component {\n  state = {\n    beer: []\n  };\n\n  componentDidMount() {\n    this.setState({ beer: List});\n  }\n\n  handleEvent = beerId => {\n    const updateList = this.state.beer.map(beer => {\n      if (beer.id === beerId) {\n        return Object.assign({}, beer, {\n          votes: beer.votes + 1\n        });\n      } else {\n        return beer;\n      }\n    });\n\n    this.setState({\n      beer: updateList\n    });\n  };\n\n  render() {\n    return this.state.beer.map(beer => (\n      <BestBeers\n        name={beer.name}\n        key={beer.id}\n        id={beer.id}\n        votes={beer.votes}\n        onVote={this.handleEvent}\n      />\n    ));\n  }\n}\n\nclass BestBeers extends Component {\n  handleClick = () => this.props.onVote(this.props.id);\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p>\n          {this.props.name}\n          <button onClick={this.handleClick}>+</button>\n          {this.props.votes}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}